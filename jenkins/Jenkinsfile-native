// jenkins/Jenkinsfile-native-fixed
// Fixed version with proper shell handling

pipeline {
    agent any
    
    environment {
        CONFIG_FILE = 'config/global-config.env'
    }
    
    stages {
        stage('Load Global Configuration') {
            steps {
                script {
                    // Use bash explicitly and proper sourcing
                    sh '''#!/bin/bash
                    if [ -f ${CONFIG_FILE} ]; then
                        echo "‚úÖ Found config file: ${CONFIG_FILE}"
                        
                        # Source the config file with bash
                        set -a  # Export all variables
                        . ${CONFIG_FILE}  # Use . instead of source for better compatibility
                        set +a
                        
                        # Export relevant variables to environment file
                        env | grep -E "AWS_|SONAR_|ECR_|K8S_|DOCKER_|MLFLOW_|GITHUB_|GIT_" > jenkins-runtime.env
                        
                        echo "‚úÖ Environment variables exported:"
                        cat jenkins-runtime.env
                    else
                        echo "‚ùå Error: Global config file not found at: ${CONFIG_FILE}"
                        echo "üìÇ Available files in current directory:"
                        ls -la
                        echo "üìÇ Checking if config directory exists:"
                        ls -la config/ || echo "Config directory not found"
                        exit 1
                    fi
                    '''
                    
                    // Load environment variables into Jenkins
                    if (fileExists('jenkins-runtime.env')) {
                        def envFile = readFile('jenkins-runtime.env')
                        envFile.split('\n').each { line ->
                            if (line.contains('=')) {
                                def (key, value) = line.split('=', 2)
                                env[key] = value.replaceAll('"', '') // Remove quotes
                            }
                        }
                        echo "‚úÖ Configuration loaded successfully"
                        
                        // Display loaded variables for debugging
                        sh 'env | grep -E "AWS_|SONAR_|ECR_|K8S_" | head -10'
                    } else {
                        error("Failed to create jenkins-runtime.env file")
                    }
                }
            }
        }

        stage('Verify Environment') {
            steps {
                sh '''#!/bin/bash
                echo "üîç Verifying loaded environment variables:"
                echo "AWS_REGION: ${AWS_REGION:-NOT_SET}"
                echo "ECR_REPO_URI: ${ECR_REPO_URI:-NOT_SET}" 
                echo "SONAR_HOST_URL: ${SONAR_HOST_URL:-NOT_SET}"
                echo "K8S_NAMESPACE: ${K8S_NAMESPACE:-NOT_SET}"
                echo "DOCKER_IMAGE_TAG: ${DOCKER_IMAGE_TAG:-NOT_SET}"
                
                # Verify required variables are set
                if [ -z "${AWS_REGION}" ] || [ -z "${ECR_REPO_URI}" ]; then
                    echo "‚ùå Critical environment variables missing!"
                    exit 1
                fi
                
                echo "‚úÖ Environment verification passed"
                '''
            }
        }

        stage('Checkout Code') {
            steps {
                echo "‚úÖ Code already checked out during pipeline initialization"
                sh '''#!/bin/bash
                echo "üìÇ Current working directory:"
                pwd
                echo "üìÇ Repository contents:"
                ls -la
                echo "üìÇ Git information:"
                git rev-parse HEAD || echo "Not a git repository"
                '''
            }
        }

        stage('Cleanup Old MLflow Runs') {
            steps {
                sh '''#!/bin/bash
                echo "üßπ Cleaning up old MLflow runs..."
                
                python3 << 'EOF'
import mlflow
import os

# Set MLflow tracking URI
mlflow.set_tracking_uri("file:./mlruns")

try:
    experiment_name = os.getenv('MLFLOW_EXPERIMENT_NAME', 'fraud-detection-production')
    max_runs = int(os.getenv('MAX_MLFLOW_RUNS_TO_KEEP', '5'))
    
    print(f"Looking for experiment: {experiment_name}")
    print(f"Max runs to keep: {max_runs}")
    
    experiment = mlflow.get_experiment_by_name(experiment_name)
    if experiment:
        runs = mlflow.search_runs(experiment_ids=[experiment.experiment_id])
        print(f"Found {len(runs)} existing runs")
        
        if len(runs) > max_runs:
            old_runs = runs.iloc[max_runs:]
            for _, run in old_runs.iterrows():
                try:
                    mlflow.delete_run(run.run_id)
                    print(f"Deleted old run: {run.run_id}")
                except Exception as e:
                    print(f"Could not delete run {run.run_id}: {e}")
        
        print(f"‚úÖ MLflow cleanup completed. Keeping {min(len(runs), max_runs)} runs.")
    else:
        print("Experiment not found, will be created during training.")
        
except Exception as e:
    print(f"MLflow cleanup warning: {e}")
EOF
                '''
            }
        }

        stage('Train Model') {
            steps {
                sh '''#!/bin/bash
                echo "ü§ñ Starting model training..."
                
                # Generate fresh training data
                echo "üìä Generating training data..."
                python3 src/generate_data.py
                
                # Train the model
                echo "üéì Training models..."
                python3 src/train_model.py
                
                # Verify model was created
                if [ ! -f "models/best_model.pkl" ]; then
                    echo "‚ùå Model training failed - no model file created"
                    ls -la models/ || echo "Models directory not found"
                    exit 1
                fi
                
                echo "‚úÖ Model training completed successfully"
                ls -la models/
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''#!/bin/bash
                echo "üê≥ Building Docker image..."
                
                # Build with current timestamp tag
                echo "Building image: ${ECR_REPO_NAME}:${DOCKER_IMAGE_TAG}"
                docker build -t ${ECR_REPO_NAME}:${DOCKER_IMAGE_TAG} .
                
                # Also tag as latest
                docker tag ${ECR_REPO_NAME}:${DOCKER_IMAGE_TAG} ${ECR_REPO_NAME}:latest
                
                echo "‚úÖ Docker build completed"
                docker images | grep ${ECR_REPO_NAME}
                '''
            }
        }

        stage('Test Application') {
            steps {
                sh '''#!/bin/bash
                echo "üß™ Testing the application..."
                
                # Test if model loads correctly
                python3 -c "
import joblib
import os
if os.path.exists('models/best_model.pkl'):
    model = joblib.load('models/best_model.pkl')
    print('‚úÖ Model loads successfully')
    print(f'Model type: {type(model).__name__}')
else:
    print('‚ùå Model file not found')
    exit(1)
"
                
                echo "‚úÖ Application tests passed"
                '''
            }
        }
    }

    post {
        always {
            echo 'üßπ Cleaning up workspace...'
            // Archive any test reports or logs
            archiveArtifacts artifacts: 'models/*.pkl', allowEmptyArchive: true
            // Clean workspace but keep important files
            sh 'ls -la'
        }
        success {
            echo '‚úÖ Pipeline completed successfully!'
            echo 'üéâ Your ML model is ready for deployment!'
        }
        failure {
            echo '‚ùå Pipeline failed. Check the logs above for details.'
            sh '''#!/bin/bash
            echo "üîç Debugging information:"
            echo "Working directory: $(pwd)"
            echo "Environment variables:"
            env | grep -E "AWS_|SONAR_|ECR_|K8S_" || echo "No relevant env vars found"
            echo "Files in workspace:"
            ls -la
            '''
        }
    }
}
